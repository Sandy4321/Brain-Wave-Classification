attach (cholesterol)
require (multcomp)
attach (cholesterol)
head (cholesterol)
table(trt)
response
trt
cholesterol
table(trt)
trt
list(trt)
aggregate (response, by=list(trt), FUN=mean)
aggregate (response, by=list(trt), FUN=sd)
aggregate (response, by=list(trt), FUN=mean)
aggregate (response, by=list(trt), FUN=sd)
fit <- aov (response ~ trt)
summary(fit)
library (gplots)
plotmeans (response ~trt, xlab="Treatment",
ylab = "Cholesterol Reduction",
main="Means with 95% CI")
install.packages('gplots')
library (gplots)
plotmeans (response ~trt, xlab="Treatment",
ylab = "Cholesterol Reduction",
main="Means with 95% CI")
aggregate (response, by=list(trt), FUN=mean)
TukeyHSD(fit)
par(las=2)
par (mar=c(5,8,4,2))
plot (TukeyHSD(fit))
library(multicomp)
?multicomp
??multicomp
?glht
library(multcomp)
par (mar = c(5,4,6,2))
comp <- glht(fit, linfct=mcp(trt="Tukey"))
comp
plot (cld(comp, level=0.05), col="lightgrey")
library (car)
lm.fit <- lm(response ~ trt, data=cholesterol)
qqPlot (lm.fit, simulate=TRUE,
main="Q-Q Plot", labels=FALSE)
bartlett.test (response ~ trt, data=cholesterol)
library(car)
outlierTest(fit)
data (litter, package="multcomp")
attach(litter)
head(litter)
table(dose)
aggregate(weight, by=list(dose), mean)
fit <- aov(weight ~ gesttime + dose)
summary(fit)
aggregate(weight, by=list(dose), mean)
fit
summary(fit)
plot(labour, main = "Monthly Civilian Labour Force")
require(fpp)
plot(labour, main = "Monthly Civilian Labour Force")
decompose(labour)
d = decompose(labour)
plot(d)
monthplot(fit$time.series[,"seasonal"],
ylab="Seasonal")
fit <- stl(labour, s.window=12)
plot(fit)
monthplot(fit$time.series[,"seasonal"],
ylab="Seasonal")
ploy(fit$time.series[,"seasonal"])
plot(fit$time.series[,"seasonal"])
plot(fit)
data(plastics)
plot(plastics)
d = decompose(plastics, type='multiplicative')
d = decompose(plastics, type='multiplicative')
plot(d)
t = stl(plastics, s.window='periodic')
sadj = seasadj(t)
plot(sadj)
newplastics = plastics
newplastics = plastics
newplastics[31] = newplastics[31] + 500
d2 = decompose(newplastics, type='multiplicative')
plot(d2)
t2 = stl(plastics, s.window=12)
plot(t2)
sadj2 = seasadj(t2)
plot(sadj2)
newplastics = plastics
newplastics[60] = newplastics[60] + 500
d2 = decompose(newplastics, type='multiplicative')
plot(d2)
require(fpp)
data(hsales)
plot(hsales, xlab = "Time",
ylab = "Sales",
main = "Monthly house sales in US (Jan/1973-Nov/1995)")
train = window(hsales, end = c(1993,12))
test = window(hsales, start = c(1994,1))
meanForecast = meanf(train, h = 23)$mean
accuracy(meanForecast, test)
snaiveForecast = snaive(train, h = 23)$mean
accuracy(snaiveForecast, test)
rwfForecast = rwf(train, h = 23, drift=TRUE)$mean
accuracy(rwfForecast, test)
plot(BoxCox(usdeaths, lambda), xlab = "Time",
ylab = paste("BoxCox(# deaths,", round(lambda, 2), ")"))
require(fpp)
plot(usdeaths, xlab = "Time", main = "Monthly total of accidental deaths in the United States (January 1973-December 1978)")
lambda = BoxCox.lambda(usdeaths)
plot(BoxCox(usdeaths, lambda), xlab = "Time",
ylab = paste("BoxCox(# deaths,", round(lambda, 2), ")"))
plot(stl(usdeaths, s.window = 'periodic'))
?BoxCox.lambda
plot(bricksq, xlab = "Time", main = "Quarterly production of bricks (in millions of units) at Portland, Australia (March 1956-September 1994)")
lambda = BoxCox.lambda(bricksq)
plot(BoxCox(bricksq, lambda), xlab = "Time",
ylab = paste("BoxCox(# deaths,", round(lambda, 2), ")"))
plot(stl(bricksq, s.window = 'periodic'))
plot(dj)
plot(decompose(dj))
?stl
Acf(dj)
plot(seasadj(dj))
(seasadj(dj))
?seasadj
tbats(dj)
plot(seasadj(tbats(dj)))
plot(dj)
BoxCox.lambda(dj)
plot(BoxCox(dj, BoxCox.lambda(dj)))
Box.test
?Box.test
glm
setwd("~/Google Drive/Courses/Sem 2/CSC 591 - ML/Project/data_psd")
d = read.csv('train_subject1_psd02.asc', sep=' ')
head(d)
dim(d)
nrow(d)
ncol(d)
d = read.csv('train_subject1_psd02.asc', sep=' ')
d = read.csv('train_subject1_psd02.asc')
head(d)
names(d)
dim(d)
setwd("~/Google Drive/Courses/Sem 2/CSC 591 - ML/Project/data")
dataset.test1 = read.csv('train_subject1_psd01.csv')
dataset.test1
plot(density(dataset.test1[,1]))
plot(density(dataset.test1[,2]))
plot(density(dataset.test1[,3]))
plot(density(dataset.test1[,1]))
lines(density(dataset.test1[,2]))
lines(density(dataset.test1[,3]))
lines(density(dataset.test1[,20]))
head(dataset.test1$X7.00E.00)
plot(density(dataset.test1[dataset.test1$X7.00E.00==7,1]))
lines(density(dataset.test1[dataset.test1$X7.00E.00==2,1]))
lines(density(dataset.test1[dataset.test1$X7.00E.00==3,1]))
plot(density(dataset.test1[dataset.test1$X7.00E.00==7,50]))
lines(density(dataset.test1[dataset.test1$X7.00E.00==2,50]))
lines(density(dataset.test1[dataset.test1$X7.00E.00==3,50]))
plot(density(dataset.test1[dataset.test1$X7.00E.00==7,72]))
lines(density(dataset.test1[dataset.test1$X7.00E.00==2,72]))
lines(density(dataset.test1[dataset.test1$X7.00E.00==3,72]))
cor(dataset.test1)
dim(cor(dataset.test1))
dim(cor(dataset.test1[,-dataset.test1$X7.00E.00]))
ncol(dataset.test1)
dataset.test1[,97]
dim(cor(dataset.test1[,-97]))
correlationMatrix = cor(dataset.test1[,-97])
class(correlationMatrix)
head(correlationMatrix)
correlationDataframe = data.frame(correlationMatrix)
correlationDataframe[,>0.8]
correlationDataframe[>0.8]
correlationDataframe[correlationDataframe>0.8]
correlationDataframe[correlationDataframe<0.8]
correlationMatrix[1][1]
correlationMatrix[1][2]
correlationMatrix[[1]]
correlationMatrix[[1][2]]
correlationMatrix
correlationMatrix[1,2]
length(correlationMatrix)
ncol(correlationMatrix)
nrow(correlationMatrix)
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(correlationMatrix[i,j]>0.8){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i+1,96,1)){
if(correlationMatrix[i,j]>0.8){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
k = i+1
for(j in seq(k,96,1)){
if(correlationMatrix[i,j]>0.8){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(correlationMatrix[i,j]>0.8){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(correlationMatrix[i,j]>0.8 && i!=j){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(correlationMatrix[i,j]>0.6 && i!=j){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(abs(correlationMatrix[i,j])>0.6 && i!=j){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(correlationMatrix[i,j]<-0.6 && i!=j){
print(paste(i,j))
}
}
}
correlationMatrix = cor(dataset.test1[,-97])
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(correlationMatrix[i,j]< (-0.6) && i!=j){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(abs(correlationMatrix[i,j])>0.6 && i!=j){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(abs(correlationMatrix[i,j])>0.7 && i!=j){
print(paste(i,j))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(abs(correlationMatrix[i,j])>0.7 && i!=j){
print(paste(i,j,correlationMatrix[i,j]))
}
}
}
for(i in seq(1,96,1)){
for(j in seq(i,96,1)){
if(abs(correlationMatrix[i,j])>0.6 && i!=j){
print(paste(i,j,correlationMatrix[i,j]))
}
}
}
var(dataset.test1)
apply(dataset.test1,2,var)
?dist
